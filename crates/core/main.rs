#![deny(
    clippy::all,
    clippy::pedantic,
    clippy::perf,
    clippy::style,
    clippy::missing_safety_doc,
    clippy::missing_const_for_fn
)]
#![allow(clippy::as_conversions, clippy::mod_module_files)]

use std::{error, path::PathBuf, process};

mod app;
mod file;

use clap::{AppSettings, Parser, Subcommand};
use log::{info, trace};
use seb::format::{BibTex, Reader, Writer};

fn main() {
    if let Err(err) = try_main() {
        eprintln!("{}", err);
        process::exit(2);
    }
}

fn try_main() -> Result<(), Box<dyn error::Error>> {
    let cli = Cli::parse();

    // if quiet then ignore verbosity but still show errors
    let verbosity = if cli.quiet {
        1
    } else {
        cli.verbosity as usize + 2
    };

    stderrlog::new().verbosity(verbosity).init()?;

    let mut file = file::open_or_create_format_file::<BibTex>(cli.file)?;

    let mut biblio = file.read_ast()?;

    let mut entry = match &cli.command {
        Commands::Doi { doi } => {
            dbg!("doi subcommand called with value of '{}'", doi);
            trace!("Checking current bibliography for possible duplicate doi..");
            app::check_entry_field_duplication(&biblio, "doi", doi)?;
            trace!("No duplicate found!");
            app::select_entry_by_doi(doi)?
        }
        Commands::Isbn { isbn } => {
            dbg!("isbn subcommand called with value of '{}'", isbn);
            trace!("Checking current bibliography for possible duplicate isbn..");
            app::check_entry_field_duplication(&biblio, "isbn", isbn)?;
            trace!("No duplicate found!");
            app::select_entry_by_isbn(isbn)?
        }
    };

    if let Some(cite) = cli.cite {
        info!("Overriding cite key value with '{}'", cite);
        entry.cite = cite;
    }
    let cite_key = entry.cite.clone();

    biblio.insert(entry);

    trace!("Adding selected entry into bibliography");
    file.write_ast(biblio)?;
    trace!("Done!");
    println!("Entry added to bibliography with cite key:");
    println!("{}", cite_key);
    Ok(())
}

#[derive(Parser)]
#[clap(name = "seb")]
#[clap(about = "Search and edit bibliographic entries to a supported format file in the terminal")]
#[clap(version, author)]
struct Cli {
    #[clap(subcommand)]
    command: Commands,

    /// The name of the file
    #[clap(short, long, parse(from_os_str))]
    file: Option<PathBuf>,

    /// How chatty the program is when performing commands
    ///
    /// The number of times this flag is used will increase how chatty
    /// the program is.
    #[clap(short, long, parse(from_occurrences))]
    verbosity: u8,

    /// The cite key of the new entry
    ///
    /// This will override any citation key either present or generated by seb.
    #[clap(long)]
    cite: Option<String>,

    /// Prevents the program from writing to stdout, errors will still be printed to stderr.
    #[clap(short, long)]
    quiet: bool,
}

#[derive(Subcommand)]
#[non_exhaustive]
enum Commands {
    /// Search for reference by doi
    #[clap(setting(AppSettings::ArgRequiredElseHelp))]
    Doi {
        /// The doi to search for
        doi: String,
    },
    /// Search for reference by ISBN
    #[clap(setting(AppSettings::ArgRequiredElseHelp))]
    Isbn {
        /// The ISBN to search for
        isbn: String,
    },
}
