#![deny(
    clippy::all,
    clippy::pedantic,
    clippy::perf,
    clippy::style,
    clippy::missing_safety_doc,
    clippy::missing_const_for_fn
)]
#![allow(clippy::as_conversions, clippy::mod_module_files)]

use std::{error, path::PathBuf, process};

mod app;
mod file;
mod interact;

use app::resolve_entry_builder;
use clap::{AppSettings, Parser, Subcommand};
use eyre::{eyre, Context};
use interact::user_resolve_biblio_builder;
use log::{info, trace};
use seb::{
    ast::{Biblio, BiblioBuilder, Entry},
    format::{BibTex, Reader, Writer},
};

use crate::app::{take_first_resolvable, user_select_resolvable};

fn main() {
    if let Err(err) = try_main() {
        eprintln!("{}", err);
        process::exit(2);
    }
}

fn try_main() -> Result<(), Box<dyn error::Error>> {
    let Cli {
        command,
        file,
        interact,
        verbosity,
        quiet,
    } = Cli::parse();

    setup_errlog(verbosity as usize, quiet)?;

    // `quiet` and `interact` cannot be set at the same time
    let interact = quiet ^ interact;

    if interact {
        trace!("Interact mode enabled");
    }

    let mut file = file::open_or_create_format_file::<BibTex>(file)?;
    let biblio = file.read_ast()?;

    let mut biblio = match biblio {
        Ok(biblio) => biblio,
        Err(builder) if interact => user_resolve_biblio_builder(builder)?,
        Err(_) => {
            return Err(
                eyre!("Some entries in the bibliography are missing required fields").into(),
            )
        }
    };

    let command_res = command.execute(&mut biblio, interact);

    if biblio.dirty() {
        trace!("Updating the bibliography file..");
        file.write_ast(biblio)?;
        trace!("Done!");
    }

    let message = command_res?;
    println!("{message}");
    Ok(())
}

fn setup_errlog(verbosity: usize, quiet: bool) -> Result<(), Box<dyn error::Error>> {
    // if quiet then ignore verbosity but still show errors
    let verbosity = if quiet {
        dbg!("quiet flag used but dbg! and error will still be shown");
        1
    } else {
        verbosity + 2
    };

    stderrlog::new().verbosity(verbosity).init()?;
    Ok(())
}

#[derive(Parser)]
#[clap(name = "seb")]
#[clap(about = "Search and edit bibliographic entries to a supported format file in the terminal")]
#[clap(version, author)]
struct Cli {
    #[clap(subcommand)]
    command: Commands,

    /// The name of the file
    #[clap(short, long, parse(from_os_str))]
    file: Option<PathBuf>,

    /// Enables interactive mode, which allows for dynamically resolving invalid entries.
    #[clap(short, long)]
    interact: bool,

    /// How chatty the program is when performing commands
    ///
    /// The number of times this flag is used will increase how chatty
    /// the program is.
    #[clap(short, long, parse(from_occurrences))]
    verbosity: u8,

    /// Prevents the program from writing to stdout, errors will still be printed to stderr.
    #[clap(short, long)]
    quiet: bool,
}

#[derive(Subcommand)]
#[non_exhaustive]
enum Commands {
    /// Add an entry to the current bibliography file
    #[clap(setting(AppSettings::ArgRequiredElseHelp))]
    Add {
        #[clap(subcommand)]
        command: AddCommands,
    },
    /// Remove an entry from the bibliography file using the cite key
    #[clap(setting(AppSettings::ArgRequiredElseHelp))]
    Rm {
        /// The cite key of the entry to remove
        cite: String,
    },
}

#[derive(Subcommand)]
enum AddCommands {
    /// Search for reference by doi
    #[clap(setting(AppSettings::ArgRequiredElseHelp))]
    Doi {
        /// The doi to search for
        doi: String,

        /// The cite key of the new entry
        ///
        /// This will override any citation key either present or generated by seb.
        #[clap(long)]
        cite: Option<String>,
    },
    /// Search for entry by IETF RFC number
    #[clap(setting(AppSettings::ArgRequiredElseHelp))]
    Ietf {
        /// The RFC number to search for
        rfc_number: usize,

        /// The cite key of the new entry
        ///
        /// This will override any citation key either present or generated by seb.
        #[clap(long)]
        cite: Option<String>,
    },
    /// Search for reference by ISBN
    #[clap(setting(AppSettings::ArgRequiredElseHelp))]
    Isbn {
        /// The ISBN to search for
        isbn: String,

        /// The cite key of the new entry
        ///
        /// This will override any citation key either present or generated by seb.
        #[clap(long)]
        cite: Option<String>,
    },
}

impl AddCommands {
    fn execute(self, biblio: &mut Biblio, interact: bool) -> eyre::Result<String> {
        let entry = if interact {
            self.interact_execute(biblio)?
        } else {
            self.detached_execute(biblio)?
        };

        let cite = entry.cite().to_owned();
        biblio.insert(entry);
        info!("Entry with cite '{cite}' added to bibliography");
        Ok(cite)
    }

    fn interact_execute(self, biblio: &mut Biblio) -> eyre::Result<Entry> {
        let bib = self.search_entries(biblio)?;
        let mut entry = user_select_resolvable(bib)?.or_else(resolve_entry_builder)?;
        self.set_cite(&mut entry);
        Ok(entry)
    }

    fn detached_execute(self, biblio: &Biblio) -> eyre::Result<Entry> {
        let mut entry = self.take_entry(biblio)?;
        self.set_cite(&mut entry);
        Ok(entry)
    }

    fn take_entry(&self, biblio: &Biblio) -> eyre::Result<Entry> {
        let bib = self.search_entries(biblio)?;
        take_first_resolvable(bib).map_err(|_| {
            eyre!(
                "Entry choosen has missing required fields!\n \
                                   hint: Missing fields can be added manually when the \
                                   `--interact` flag is enabled"
            )
        })
    }

    fn search_entries(&self, biblio: &Biblio) -> eyre::Result<Result<Biblio, BiblioBuilder>> {
        match self {
            AddCommands::Doi { doi, .. } => {
                dbg!("doi subcommand called with value of '{}", &doi);
                trace!("Checking current bibliography for possible duplicate doi..");
                app::check_entry_field_duplication(biblio, "doi", doi)?;
                trace!("No duplicate found!");
                seb::entries_by_doi(doi).wrap_err_with(|| eyre!("Cannot find the entry"))
            }
            AddCommands::Ietf { rfc_number, .. } => {
                dbg!("ietf subcommand called with value of '{}", &rfc_number);
                trace!("Checking current bibliography for possible duplicate RFC number..");
                app::check_entry_field_duplication(biblio, "number", &rfc_number.to_string())?;
                trace!("No duplicate found!");
                seb::entries_by_rfc(*rfc_number).wrap_err_with(|| eyre!("Cannot find the entry"))
            }
            AddCommands::Isbn { isbn, .. } => {
                dbg!("isbn subcommand called with value of '{}", &isbn);
                trace!("Checking current bibliography for possible duplicate ISBN.");
                app::check_entry_field_duplication(biblio, "isbn", isbn)?;
                trace!("No duplicate found!");
                seb::entries_by_isbn(isbn).wrap_err_with(|| eyre!("Cannot find the entry"))
            }
        }
    }

    fn set_cite(self, entry: &mut Entry) {
        match self {
            AddCommands::Doi {
                cite: Some(cite), ..
            }
            | AddCommands::Ietf {
                cite: Some(cite), ..
            }
            | AddCommands::Isbn {
                cite: Some(cite), ..
            } => entry.set_cite(cite),
            _ => {}
        }
    }
}

impl Commands {
    fn execute(self, biblio: &mut Biblio, interact: bool) -> eyre::Result<String> {
        match self {
            Commands::Add { command } => command.execute(biblio, interact),
            Commands::Rm { cite } => {
                dbg!("rm subcommand called with the value of '{cite}'");
                trace!("Checking current bibliography for entry with this cite key..");
                if biblio.remove(&cite).is_some() {
                    Ok("Entry removed from bibliography".to_owned())
                } else {
                    Ok(format!("No entry found with the cite key of '{cite}'"))
                }
            }
        }
    }
}
